{"version":3,"sources":["components/EditTodoForm.js","components/AddTodoForm.js","components/Todo.js","components/TodoList.js","components/Today.js","components/Footer.js","App.js","index.js"],"names":["EditTodoForm","props","useState","error","setError","success","setSuccess","useForm","defaultValues","currentTodo","register","handleSubmit","setValue","description","onSubmit","data","e","trim","id","completed","updateTodo","target","reset","setTimeout","className","type","name","placeholder","autoFocus","ref","onChange","setStatus","value","AddTodoForm","addTodo","Todo","onClick","completeTodo","todo","editRow","deleteTodo","TodoList","todos","length","filteredTodos","map","Today","date","d","weekDay","getDay","monthDay","getDate","month","getMonth","year","getFullYear","printDate","Date","Footer","href","rel","App","setTodos","useEffect","localStorage","getItem","setItem","JSON","stringify","todoLocal","parse","getLocalTodos","status","setFilteredTodos","filter","filterHandler","editing","setEditing","setCurrentTodo","updatedTodo","uuidv4","item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c5fb1f21.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './EditTodoForm.css';\r\nimport { useForm } from 'react-hook-form';\r\n//library for managing state, validation, errors, etc in forms\r\n\r\nconst EditTodoForm = (props) => {   //it receives currentTodo and updateTodo as props\r\n    \r\n    //console.log(props.currentTodo);\r\n\r\n    //we need a state for error and success\r\n    const [error, setError] = useState(null);\r\n    const [success, setSuccess] = useState(null);\r\n\r\n    const {register, handleSubmit, setValue} = useForm({\r\n        defaultValues: props.currentTodo\r\n    });\r\n\r\n    setValue('description', props.currentTodo.description);\r\n\r\n    \r\n    \r\n    const onSubmit = (data, e) => {\r\n        // data = description\r\n        //console.log(data);\r\n\r\n        //manage errors, \r\n        //if data without whitespaces is empty, setError message\r\n        if ( data.description.trim() === '') {\r\n            setError('Please, enter your task');\r\n            return;\r\n        }\r\n\r\n        // if not, send data to updateTodo function to create a edited todo\r\n        data.id = props.currentTodo.id;\r\n        data.completed = props.currentTodo.completed;\r\n        props.updateTodo(props.currentTodo.id, data);\r\n\r\n        //remove error\r\n        setError(null);\r\n        //clear field\r\n        e.target.reset();\r\n        //setSuccess message for 1.5 seconds.\r\n        setSuccess('Your task was edited!');\r\n        setTimeout(() => {\r\n            setSuccess(null);\r\n        }, 1500);\r\n            \r\n    };\r\n\r\n    //Here we set the status with onChange event in select element. \r\n    const statusHandler = (e) => {\r\n        props.setStatus(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            {  //always {} to write javascript inside jsx\r\n                //if error exists show error-div with error message\r\n                error && \r\n                (\r\n                    <div className=\"error-div\">\r\n                        { error }\r\n                    </div>\r\n                )\r\n\r\n            }\r\n            {  //always {} to write javascript inside jsx\r\n                //if success exists show success-div with success message\r\n                success && \r\n                (\r\n                    <div className=\"success-div\">\r\n                        { success }\r\n                    </div>\r\n                )\r\n\r\n            }\r\n            <div className=\"form-div\">\r\n                <input \r\n                    className=\"todo-input\" \r\n                    type=\"text\"\r\n                    name=\"description\"\r\n                    placeholder=\"Enter your task\" \r\n                    autoFocus\r\n                    ref={\r\n                        register\r\n                    }\r\n                />\r\n                <button \r\n                    className=\"todo-button\"\r\n                    type=\"submit\"\r\n                    >EDIT\r\n                </button>\r\n            </div>\r\n            <div className=\"select-div\">\r\n                <select \r\n                    onChange={statusHandler}\r\n                    className=\"filter-todo\"\r\n                    name=\"todos\"\r\n                    >\r\n                        <option value=\"all\">All</option>\r\n                        <option value=\"completed\">Completed</option>\r\n                        <option value=\"uncompleted\">Uncompleted</option>\r\n                </select>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default EditTodoForm;\r\n\r\n","import React, { useState } from 'react';\r\nimport './AddTodoForm.css';\r\nimport { useForm } from 'react-hook-form';  \r\n//library for managing state, validation, errors, etc in forms\r\n\r\nconst AddTodoForm = (props) => {   //it receives addTodo and setStatus as props\r\n    //we need states for error and success\r\n    const [error, setError] = useState(null);\r\n    const [success, setSuccess] = useState(null);\r\n\r\n    const {register, handleSubmit} = useForm();\r\n\r\n\r\n    \r\n    const onSubmit = (data, e) => {\r\n        // data = description\r\n        //console.log(data);\r\n\r\n        //manage errors, \r\n        //if data without whitespaces is empty, setError message \r\n        if ( data.description.trim() === '') {\r\n            setError('Please, enter a new task');\r\n            //and reset() field. \r\n            return e.target.reset();\r\n        } \r\n        \r\n        // if not, send data to addTodo function to create a new todo\r\n        props.addTodo(data);\r\n        \r\n        //remove error\r\n        setError(null);  \r\n        //clear field\r\n        e.target.reset();\r\n        //setSuccess message for 1.5 seconds. \r\n        setSuccess('New task was added!');\r\n        setTimeout(() => {\r\n            setSuccess(null);\r\n        }, 1500);\r\n            \r\n    };\r\n\r\n    //Here we set the status with onChange event in select element. \r\n    const statusHandler = (e) => {\r\n        //e.target.value = option's value\r\n        props.setStatus(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>  \r\n            { //always {} to write javascript inside jsx\r\n                //if error exists show error-div with error message\r\n                error && \r\n                (\r\n                    <div className=\"error-div\">\r\n                        { error }\r\n                    </div>\r\n                )\r\n\r\n            }\r\n            { //always {} to write javascript inside jsx\r\n                //if success exists show success-div with success message\r\n                success && \r\n                (\r\n                    <div className=\"success-div\">\r\n                        { success }\r\n                    </div>\r\n                )\r\n\r\n            }\r\n            <div className=\"form-div\">\r\n                <input \r\n                    className=\"todo-input\" \r\n                    type=\"text\"\r\n                    name=\"description\"\r\n                    placeholder=\"Enter new task\" \r\n                    autoFocus\r\n                    ref={\r\n                        register\r\n                    }\r\n                />\r\n                <button \r\n                    className=\"todo-button\"\r\n                    type=\"submit\"\r\n                    >ADD\r\n                </button>\r\n            </div>\r\n            <div className=\"select-div\">\r\n                <select \r\n                    onChange={statusHandler}\r\n                    className=\"filter-todo\"\r\n                    name=\"todos\"\r\n                    >\r\n                        <option value=\"all\">All</option>\r\n                        <option value=\"completed\">Completed</option>\r\n                        <option value=\"uncompleted\">Uncompleted</option>\r\n                </select>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default AddTodoForm;\r\n\r\n","import React from 'react';\r\nimport './Todo.css';\r\n\r\nconst Todo = (props) => {   // it receives todo, deleteTodo, completeTodo, editRow as props.\r\n    return ( \r\n\r\n        <div className=\"todo\" key={props.todo.id}>\r\n            <button \r\n                onClick={() => props.completeTodo(props.todo)}\r\n                className={`complete-btn ${props.todo.completed ? \"done\" : \"\"}`}>\r\n                <i className=\"fas fa-check\"></i>\r\n            </button>\r\n            <li className={`todo-item ${props.todo.completed ? \"completed\" : \"\"}`}>{props.todo.description}</li>\r\n            <button \r\n                onClick={() => {props.editRow(props.todo)}}\r\n                className=\"edit-btn\">\r\n                <i className=\"fas fa-pencil-alt\"></i>\r\n            </button>\r\n            <button \r\n                onClick={() => {props.deleteTodo(props.todo.id)}}\r\n                className=\"trash-btn\">\r\n                <i className=\"fas fa-trash\"></i>\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Todo;","import React from 'react';\r\nimport './TodoList.css';\r\nimport Todo from './Todo';\r\n\r\nconst TodoList = (props) => { //it receives todos, deleteTodo, completeTodo, editRow, filteredTodos as props. \r\n\r\n    //console.log(props.todos);\r\n    \r\n    return ( \r\n        <div className=\"todo-container\">\r\n            \r\n                { \r\n                    // {} to write javascript inside jsx\r\n\r\n                    //if length of todos is > 0 \r\n                    props.todos.length > 0 ? \r\n                        // print a list \r\n                        <ul className=\"todo-list\">\r\n                            {  \r\n                                // javascript inside jsx\r\n                                // loop over all filteredTodos and for each todo make a Todo component. \r\n                                props.filteredTodos.map(todo => (\r\n                                    <Todo\r\n                                        key={todo.id}\r\n                                        todo={todo} \r\n                                        deleteTodo={props.deleteTodo}\r\n                                        completeTodo={props.completeTodo}\r\n                                        editRow={props.editRow}\r\n                                    />              \r\n    \r\n                                ))\r\n\r\n                            }\r\n\r\n                        </ul>\r\n\r\n                     : (\r\n                         //if length of todos is <= 0, show alert-div\r\n                        <div className=\"alert-div\">\r\n                            To create a to-Do list, please enter your first task in the field above and click \"ADD\" button. \r\n                        </div>\r\n                    )\r\n                }\r\n                        \r\n        </div>\r\n    );\r\n}\r\n \r\nexport default TodoList;\r\n\r\n","import React from 'react';\r\nimport './Today.css';\r\n\r\nconst Today = () => {\r\n\r\n    const currDate = new Date();\r\n    const date = printDate(currDate);\r\n    \r\n    function printDate(d) {\r\n        const days = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];\r\n        const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n        //Get specific information that you need from new Date(). \r\n        const weekDay = days[d.getDay()]; \r\n        const monthDay = d.getDate();\r\n        const month = months[d.getMonth()];\r\n        const year = d.getFullYear();\r\n\r\n        //Here weekDay + monthDay + month + year (Monday, 13 july 2020).\r\n        return weekDay + \", \" + monthDay + \" \" + month + \" \" + year;\r\n    }\r\n    \r\n    return (\r\n        <div className=\"today-container\">\r\n            <h2>My Day</h2>\r\n            <p className=\"today\">{date}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Today;","import React from 'react';\r\nimport './Footer.css';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div>\r\n            <footer>\r\n                <p>&copy; 2021 Guaci Gutiérrez &bull; <a href=\"https://guacig.github.io/\" target=\"_blank\" rel=\"noreferrer\">Portfolio</a></p>\r\n        </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport EditTodoForm from './components/EditTodoForm';\nimport AddTodoForm from './components/AddTodoForm';\nimport TodoList from './components/TodoList';\nimport Today from './components/Today';\nimport Footer from './components/Footer';\nimport { v4 as uuidv4 } from 'uuid'; //library to generate aleatory id's\n\n\nfunction App() {\n\n  \n  //todosData = empty array where we store different objects with their properties for initial state.\n  const todosData = [\n    //{id: uuidv4(), description: 'Go shopping', completed: false}\n  ];\n   \n  const [todos, setTodos] = useState(todosData);\n\n  \n  //==================================================================\n  //useEffect\n  //===================================================================\n\n  //RUN ONCE WHEN THE APP START because it doesn't have dependencies at the end ,[]); \n  //This function stores todos in localStorage:\n  useEffect(() => {\n    const getLocalTodos = () => {\n      //if localStorage is empty, \n      if (localStorage.getItem('todos') === null) {\n        //localStorage stores 'todos' as a string using the JSON.stringify() method\n        localStorage.setItem('todos', JSON.stringify([]));\n      }\n      else {  //if localStorage has already 'todos', \n        //convert strings 'todos' to objects 'todos' using the JSON.parse() method \n        let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\n        //and setTodos\n        setTodos(todoLocal);\n      }\n    }\n    getLocalTodos();\n  }, []);\n\n\n\n  //setStatus todos: ****************************************************\n  //Use useEffect to filter 'todos' with <select> element depending on the status(options):\n  //status can be 'complete', 'uncomplete' or 'all'\n  const [status, setStatus] = useState('all');\n  //We need a empty array where store the filtered 'todos'\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  useEffect(() => {\n    //depending on the status, show me a TodoList. filteredTodos will be sent to TodoList component. \n    const filterHandler = () => {\n      switch(status) {\n        case 'completed':\n          setFilteredTodos(todos.filter((todo) => todo.completed === true));\n          break;\n        case 'uncompleted':\n          setFilteredTodos(todos.filter((todo) => todo.completed === false));\n          break;\n        default:\n          setFilteredTodos(todos);\n          break;\n      }\n    };\n\n    //Save to local\n    const saveLocalTodos = () => {\n      localStorage.setItem('todos', JSON.stringify(todos));\n    };\n\n    filterHandler();\n    saveLocalTodos();\n  }, [todos, status]);\n  \n \n  //==================================================================\n  //Functions  \n  //==================================================================\n\n  //Add todos: ****************************************************\n  //We receive the information through the input = description \"go shopping\"\n  //we add the todo.id and todo.completed properties and we put it inside todos array\n  const addTodo = (todo) => {\n    todo.id = uuidv4();\n    todo.completed = false;\n    setTodos([\n      todo,\n      ...todos,\n    ])\n  }\n  \n\n  //Remove todos: ************************************************\n  //we send an id and we put the 'todo' out which match with the sent id\n  const deleteTodo = (id) => {   \n    setTodos(todos.filter(todo => todo.id !== id));\n  }\n\n\n  //Edit todos: **************************************************\n  //In order to switch between AddTodoForm and EditTodoForm components in the state, \n  //we need a 'editing' variable with a boolean in false and setEditing to change them. \n  const [editing, setEditing] = useState(false);\n  //Also we need an currentTodo object variable without values which receives the todo's info to edit \n  const [currentTodo, setCurrentTodo] = useState({\n    id: null, description: '', completed: null\n  })\n\n  //when we click the pencil-icon button on any todo,\n  const editRow = (todo) => {\n    //the EditTodoForm component is showed\n    setEditing(true);\n    // and the clicked todo's info is stored in the currentTodo variable\n    setCurrentTodo({\n      id: todo.id, description: todo.description, completed: todo.completed, \n    })\n  }\n\n  //when we click EDIT button the updateTodo is trigged. We send an id and an updatedTodo as parameters. \n  const updateTodo = (id, updatedTodo) => {\n    //console.log(updatedTodo);\n    //first, we come back to show the AddTodoForm component. \n    setEditing(false);\n    //and then, we loop over all 'todos' and we ask to each one.  \n    //if id(parameter) === todo.id, set the updated'todo' if not, set the todo. \n    setTodos(todos.map(todo => todo.id === id ? updatedTodo : todo))\n  }\n\n\n  //Complete todos: **************************************************\n  //when we click the checked-icon button on any todo,\n  const completeTodo = (todo) => {\n    //we loop over all 'todos' and we ask to each one.\n    // if item.id === todo.id(parameter)   \n    setTodos(todos.map(item => {\n      if (item.id === todo.id) {\n        //return the same item but change the completed property to the opposite. \n          return {\n              ...item, completed: !item.completed\n          }\n      } // and return it.\n      return item;\n    }));\n  }\n\n  \n\n  return (\n    <div className=\"App\">\n      <header>Make your To-Do List</header>\n      <div className=\"container\">\n        <Today />\n        { //we use {} to write javascript inside jsx\n          //if editing is true, show me <EditTodoForm />, if not, show me <AddTodoForm />  \n          editing ? (\n            <EditTodoForm \n              currentTodo={currentTodo}\n              updateTodo={updateTodo}\n            />\n\n          ) : (\n            <AddTodoForm \n              addTodo={addTodo}\n              setStatus={setStatus}\n            />\n\n          )\n        }\n        <TodoList \n          todos={todos}\n          deleteTodo={deleteTodo}\n          completeTodo={completeTodo}\n          editRow={editRow}\n          filteredTodos={filteredTodos}\n        />\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}